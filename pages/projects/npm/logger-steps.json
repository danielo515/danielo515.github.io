{
  "url": "https://www.npmjs.com/package/logger-steps",
  "name": "logger-steps",
  "badge": "<img src=\"https://img.shields.io/node/v/logger-steps.svg?style=flat-square\" alt=\"Node\" class=\"badge\">\n<a href=\"https://www.npmjs.com/package/logger-steps\"><img src=\"https://img.shields.io/npm/v/logger-steps.svg?style=flat-square\" alt=\"NPM\" class=\"badge\"></a>\n<a href=\"https://travis-ci.org/danielo515/logger-steps\"><img src=\"https://img.shields.io/travis/danielo515/logger-steps/master.svg?style=flat-square\" alt=\"Travis\" class=\"badge\"></a>\n<a href=\"https://david-dm.org/danielo515/logger-steps\"><img src=\"https://img.shields.io/david/danielo515/logger-steps.svg?style=flat-square\" alt=\"David\" class=\"badge\"></a>\n<a href=\"https://coveralls.io/github/danielo515/logger-steps\"><img src=\"https://img.shields.io/coveralls/danielo515/logger-steps.svg?style=flat-square\" alt=\"Coverage Status\" class=\"badge\"></a>\n<a href=\"https://gitmoji.carloscuesta.me/\"><img src=\"https://img.shields.io/badge/gitmoji-%20%F0%9F%98%9C%20%F0%9F%98%8D-FFDD67.svg?style=flat-square\" alt=\"Gitmoji\" class=\"badge\"></a>",
  "description": [
    "Group log messages and send them grouped the logger of your choice",
    "Log messages are useful, but they can be missleading if the order is not correct or if related messages\ndo not appear close to each other (which is quite common on asynchronous programming).\nGrouping messages could be a pain and would force you to refactorize your code deeply.",
    "This library fixes this situation by wrapping the logger of your choize and providing an interface that mimics the one\nof the logger. Then you can use the returned API in the same way you are used to but messages will be grouped toghether.",
    "The most basic usage is as follows:",
    "Install via yarn",
    "or npm",
    "You can pass in extra options to configure the behavior of the tracer (➕ required, ➖ optional, ✏️ default).",
    "➕ logger ( logger )\n 📝 The logger you want to report to\n ❗️ currently it should implement the following methods: error, warn, log, info, debug\n ℹ️ info\n 💡 example: console\n➖ logger ( String ) ✏️ Steps\n 📝 The title of the trace\n ℹ️ It will appear at the top of the output\n 💡 example: 'AUTH-FLOW'\n➖ logger ( Number ) ✏️ 30\n 📝 Timeout before triggering an automatic flush\n ❗️ Setting a big timeout could lead to higher memmory usage in case you forget to flush often\n ℹ️ info:\n 💡 example: 15",
    "See example folder or the runkit example.",
    "If you don't use a package manager, you can access logger-steps via unpkg (CDN), download the source, or point your package manager to the url.",
    "logger-steps is compiled as a collection of CommonJS modules & [ES2015 modules](http://www.2ality.com/2014/0\n-9/es6-modules-final.html) for bundlers that support the jsnext:main or module field in package.json (Rollup, Webpack 2)",
    "The logger-steps package includes precompiled production and development UMD builds in the dist folder. They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. You can drop a UMD build as a <script> tag on your page. The UMD builds make logger-steps available as a window.loggerSteps global variable.",
    "The code is available under the MIT license.",
    "We are open to contributions, see CONTRIBUTING.md for more info.",
    "This module was created using generator-module-boilerplate."
  ]
}