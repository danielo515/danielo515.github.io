---
import type { links } from "@/links";
import ThemeToggle from "./ThemeToggle.astro";
import HomeIcon from "./icons/HomeIcon.astro";

interface Props {
  navItems: links["navItems"];
}
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto py-1 md:py-2"
>
  <nav
    class="flex flex-1 px-3 text-sm font-medium text-gray-600 dark:text-gray-200 justify-between md:justify-center items-center"
  >
    <a
      class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
      aria-label="home"
      href="/#home"
    >
      <HomeIcon />
    </a>
    {
      Astro.props.navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={link.label}
          href={link.href}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback: IntersectionObserverCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log("Intersecting", entry);
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
              console.log("adding to", item);
            } else {
              console.log("removing to", item);
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.5,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  header {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 200px;
  }

  @media (max-width: 768px) {
    header {
      animation-range: 0 50px;
    }
  }

  @keyframes nav-shadow {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur-lg bg-opacity-30 ring-white/10;
    }
  }
</style>
